#!/usr/bin/python3
import struct
import time

# Verificar formato en https://wiki.wireshark.org/Development/LibpcapFileFormat
# Cabecera
magic_number = 2712847316  #  0xa1b2c3d4 (identical) or 0xd4c3b2a1 (swapped) int(str("a1b2c3d4"),16) ----> 2712847316
major_number = 2  # El número de versión de este formato de archivo (Version actual es la 2.4) -----> 2
minor_number = 4  # El número de versión de este formato de archivo (Versión actual es la 2.4) -----> 4
gmt_yo_local = 0
acc_timestamp = 0
max_len = 65535   #  "Muestreo de largo" para la captura típica es de 65535
dl_type = 1

# Definimos la clase Pcap para la generción de objetos 
class Pcap:
 def __init__(self, filename, link_type=dl_type):
  self.pcap_file = open(filename, 'wb')

  # Ver https://docs.python.org/3/library/struct.html#format-characters
  self.pcap_file.write(struct.pack('@ I H H i I I I ', magic_number, major_number, minor_number, gmt_yo_local, acc_timestamp, max_len, link_type))

 def writelist(self, data=[]):
  for i in data: # Considerar tabulado en python
   self.write(i)
  return

 def write(self, data):
  ts_sec, ts_usec = map(int, str(time.time()).split('.'))
  length = len(data)
  #VER https://docs.python.org/3/library/struct.html#format-characters
  self.pcap_file.write(struct.pack('@ I I I I', ts_sec, ts_usec, length, length))
  self.pcap_file.write(data)


 def close(self):
  self.pcap_file.close()

###############################################################