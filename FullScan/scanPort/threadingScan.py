#!/usr/bin/python3
# Threader3000 - Multi-threader Port Scanner
# A project by The Mayor
# v1.0.7
# https://github.com/dievus/threader3000
# Licensed under GNU GPLv3 Standards.  https://www.gnu.org/licenses/gpl-3.0.en.html

### https://github.com/dievus/threader3000/blob/master/threader3000.py


import socket
import os
import signal
import time
import threading
import sys
import subprocess
from queue import Queue
from datetime import datetime
import csv

# Start Threader3000 with clear terminal
subprocess.call('clear', shell=True)

# Main Function
def main():
   socket.setdefaulttimeout(0.30)
   print_lock = threading.Lock()
   discovered_ports = []

# Welcome Banner
   print("-" * 60)
   print("        Scanner de puertos          ")
   ##print("                       Version 1.0.7                    ")
   ##print("                   A project by The Mayor               ")
   print("-" * 60)
   time.sleep(1)
   target = input("Ingresa la IP o URL: ")
   error = ("Dato Invalido")
   try:
      t_ip = socket.gethostbyname(target)
   except (UnboundLocalError, socket.gaierror):
      print("\n[-]Invalid format. Please use a correct IP or web address[-]\n")
      sys.exit()
   #Banner
   fecha= datetime.today().strftime('%Y_%m_%d_%H_%M_%S')
   print("-" * 60)
   print("Scanning target "+ t_ip)
   print("Time started: "+ str(datetime.now()))
   print("-" * 60)
   t1 = datetime.now()

   def _savePorts(listPorts,target):
   
      lt = [int(x) for x in listPorts]
      nFile ='outputPorts/'+target+'__'+fecha +'.txt'
      # open file in write mode
      if(os.path.isdir('outputPorts')):
         pass
      else:
         os.mkdir("outputPorts")



      with open(nFile, 'w') as fp:
            for item in lt:
               # write each item on a new line
               fp.write("%s\n" % item)
            fp.close()
            


   def portscan(port):

      s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
      
      try:
         portx = s.connect((t_ip, port))
         with print_lock:
            print("Port {} is open".format(port))
            discovered_ports.append(str(port))
         portx.close()

      except (ConnectionRefusedError, AttributeError, OSError):
         pass

   def threader():
      while True:
         worker = q.get()
         portscan(worker)
         q.task_done()
   
   q = Queue()
   
   #startTime = time.time()
   
   for x in range(2000):
      t = threading.Thread(target = threader)
      t.daemon = True
      t.start()

   for worker in range(1, 6553):  ##range(1, 65536):
      q.put(worker)

   q.join()

   t2 = datetime.now()
   total = t2 - t1
   print("Port scan completed in "+str(total))
   print("-" * 60)
   print("Threader3000 recommends the following Nmap scan:")
   print("*" * 60)
   print("nmap -p{ports} -sV -sC -T4 -Pn -oA {ip} {ip}".format(ports=",".join(discovered_ports), ip=target))
   print("*" * 60)
   pathFile =target +'__'+fecha
   nmap = "nmap -p{ports} -sV -sC -T4 -Pn -oA {path} {ip}".format(ports=",".join(discovered_ports),path=pathFile, ip=target)
   t3 = datetime.now()
   total1 = t3 - t1
   
   '''
   Funcion para guardar los puertos encontrados en el directorio output
   procesa lista y la guarda en un archivo scanPort mas nombre del target y la fecha
   '''
   _savePorts(discovered_ports,target)



   #Nmap Integration (in progress)

   def automate():
      choice = '0'
      while choice =='0':
         print("Would you like to run Nmap or quit to terminal?")
         print("-" * 60)
         print("1 = Run suggested Nmap scan")
         print("2 = Run another Threader3000 scan")
         print("3 = Exit to terminal")
         print("-" * 60)
         choice = input("Option Selection: ")
         if choice == "1":
            try:
               print(nmap)
               os.chdir('outputPorts') #target
               os.mkdir(pathFile) #target
               os.chdir(pathFile)
               os.system(nmap)
               #convert = "xsltproc "+target+".xml -o "+target+".html"
               #os.system(convert)
               t3 = datetime.now()
               total1 = t3 - t1
               print("-" * 60)
               print("Combined scan completed in "+str(total1))
               print("Press enter to quit...")
               input()
            except FileExistsError as e:
               print(e)
               exit()
         elif choice =="2":
            main()
         elif choice =="3":
            sys.exit()
         else:
            print("Please make a valid selection")
            automate()
   automate()

if __name__ == '__main__':
   try:
      main()
   except KeyboardInterrupt:
      print("\nGoodbye!")
      quit()